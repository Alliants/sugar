package com.automatastudios.napkin {	import com.adobe.images.JPGEncoder;	import com.dynamicflash.util.Base64;		import flash.display.Sprite;	import flash.display.Bitmap;    import flash.ui.ContextMenu;    import flash.ui.ContextMenuItem;    import flash.ui.ContextMenuBuiltInItems;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;    import flash.net.URLVariables;	import flash.external.ExternalInterface;	import flash.display.BitmapData;	import flash.utils.ByteArray;		public class Napkin extends Sprite {		private static const IMAGE_QUALITY:uint = 80;				private var _jpgEncoder:JPGEncoder;		private var _menu:ContextMenu;		private var _clearMenuItem:ContextMenuItem;		public var maxX:Number = 0;		public var maxY:Number = 0;				public function Napkin() {			_jpgEncoder = new JPGEncoder(IMAGE_QUALITY);			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onAddedToStage(evt:Event):void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.addEventListener(MouseEvent.MOUSE_DOWN, onStartDrawing);						_menu = new ContextMenu();			_menu.hideBuiltInItems();			_menu.addEventListener(ContextMenuEvent.MENU_SELECT, onShowMenu);						_clearMenuItem = new ContextMenuItem("Clear Doodle");			            _menu.customItems.push(_clearMenuItem);            _clearMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onClear);							ExternalInterface.addCallback("uploadDrawing", onUploadDrawing);						this.contextMenu = _menu;			onClear();		}				private function onClear(evt:ContextMenuEvent = null):void {			this.graphics.clear();			this.graphics.lineStyle(0, 0);			this.maxX = 0;			this.maxY = 0;		}				private function onShowMenu(evt:ContextMenuEvent = null):void {			onStopDrawing();		}				private function onStartDrawing(evt:MouseEvent):void {			stage.removeEventListener(MouseEvent.MOUSE_DOWN, onStartDrawing);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onDrawSegment);			stage.addEventListener(MouseEvent.MOUSE_UP, onStopDrawing);			stage.addEventListener(Event.MOUSE_LEAVE, onStopDrawing);						this.graphics.moveTo(evt.stageX, evt.stageY);			if( this.maxX < evt.stageX ) {				this.maxX = evt.stageX;			}			if( this.maxY < evt.stageY ) {				this.maxY = evt.stageY;			}		}				private function onDrawSegment(evt:MouseEvent):void {			this.graphics.lineTo(evt.stageX, evt.stageY);			evt.updateAfterEvent();		}				private function onStopDrawing(evt:MouseEvent = null):void {			if (evt != null) {				onDrawSegment(evt);			}						stage.addEventListener(MouseEvent.MOUSE_DOWN, onStartDrawing);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onDrawSegment);			stage.removeEventListener(MouseEvent.MOUSE_UP, onStopDrawing);			stage.removeEventListener(Event.MOUSE_LEAVE, onStopDrawing);					}				private function onUploadDrawing():void {			var loader:URLLoader = new URLLoader();			var serviceUrl:String = loaderInfo.parameters["service"];			var request:URLRequest = new URLRequest(serviceUrl);			var variables:URLVariables = new URLVariables();			var jpgData:ByteArray;			var jpgString:String;			var bitmapData:BitmapData;			var p:String;						request.method = URLRequestMethod.POST;			request.data = new Object();						// add flash vars to data sent out			/*			for (p in loaderInfo.parameters) {				if (p != "service") {					request.data[p] = loaderInfo.parameters[p];				}			}			*/						bitmapData = new BitmapData(this.maxX + 15, this.maxY + 15);			bitmapData.draw(this);						jpgData = _jpgEncoder.encode(bitmapData);			jpgString = Base64.encodeByteArray(jpgData);						variables.drawing = jpgString;			request.data = variables;						loader.addEventListener(Event.COMPLETE, onUploadComplete);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			loader.load(request);					}				private function onUploadComplete(evt:Event):void {			ExternalInterface.call("onDrawingUploaded", URLLoader(evt.target).data);		}				private function onIOError(evt:IOErrorEvent):void {			ExternalInterface.call("onDrawingError", "IOError");		}				private function onSecurityError(evt:SecurityErrorEvent):void {			ExternalInterface.call("onDrawingError", "SecurityError");		}			}	}